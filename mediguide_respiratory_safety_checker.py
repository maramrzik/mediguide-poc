# -*- coding: utf-8 -*-
"""MediGuide Respiratory Safety Checker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iWoK47CpRdUApmQE9YCNhzfleuUPo_RZ

# MediGuide Checker – Prescription Safety Prototype
Enhanced with full patient context, GFR safety, allergy, and disease risk logic.
"""

patients = [
    {
        'name': 'Anna',
        'gfr': 50,
        'conditions': ['asthma', 'hypertension'],
        'age': 65,
        'weight': 80,
        'gender': 'female',
        'ethnicity': 'Caucasian',
        'ALT': 22,
        'AST': 30,
        'bilirubin': 0.9,
        'genetic_variants': {},
        'lifestyle': {'smoking': False, 'alcohol': 'moderate'},
        'current_medications': ['salmeterol', 'prednisolone'],
        'allergies': ['penicillin']
    },
    {
        'name': 'Jin',
        'gfr': 25,
        'conditions': ['COPD', 'heart failure'],
        'age': 70,
        'weight': 72,
        'gender': 'male',
        'ethnicity': 'Asian',
        'ALT': 35,
        'AST': 40,
        'bilirubin': 1.2,
        'genetic_variants': {},
        'lifestyle': {'smoking': True, 'alcohol': 'low'},
        'current_medications': ['theophylline', 'metformin'],
        'allergies': []
    },
    {
        'name': 'Markus',
        'gfr': 58,
        'conditions': ['asthma', 'diabetes'],
        'age': 45,
        'weight': 90,
        'gender': 'male',
        'ethnicity': 'Caucasian',
        'ALT': 28,
        'AST': 25,
        'bilirubin': 1.0,
        'genetic_variants': {},
        'lifestyle': {'smoking': False, 'alcohol': 'low'},
        'current_medications': ['prednisolone', 'theophylline'],
        'allergies': ['aspirin']
    },
    {
        'name': 'Leila',
        'gfr': 65,
        'conditions': ['chronic bronchitis', 'hypertension'],
        'age': 55,
        'weight': 68,
        'gender': 'female',
        'ethnicity': 'Middle Eastern',
        'ALT': 20,
        'AST': 22,
        'bilirubin': 0.7,
        'genetic_variants': {},
        'lifestyle': {'smoking': True, 'alcohol': 'none'},
        'current_medications': ['salmeterol', 'ibuprofen'],
        'allergies': []
    },
    {
        'name': 'Thomas',
        'gfr': 28,
        'conditions': ['copd', 'renal impairment'],
        'age': 72,
        'weight': 74,
        'gender': 'male',
        'ethnicity': 'African',
        'ALT': 40,
        'AST': 45,
        'bilirubin': 1.3,
        'genetic_variants': {},
        'lifestyle': {'smoking': True, 'alcohol': 'moderate'},
        'current_medications': ['metformin', 'salmeterol'],
        'allergies': ['nsaids']
    },
    {
        'name': 'Raj',
        'gfr': 38,  # triggers metformin warning
        'conditions': ['asthma'],
        'age': 60,
        'weight': 74,
        'gender': 'male',
        'ethnicity': 'Indian',
        'ALT': 55,  # triggers isoniazid warning
        'AST': 50,
        'bilirubin': 1.4,
        'genetic_variants': {},
        'lifestyle': {'smoking': False, 'alcohol': 'low'},
        'current_medications': ['metformin', 'isoniazid'],
        'allergies': [],
    },
    {
        'name': 'Maria',
        'gfr': 70,
        'conditions': ['copd', 'heart failure'],
        'age': 68,
        'weight': 62,
        'gender': 'female',
        'ethnicity': 'Hispanic',
        'ALT': 30,
        'AST': 25,
        'bilirubin': 0.9,
        'genetic_variants': {},
        'lifestyle': {'smoking': True, 'alcohol': 'moderate'},
        'current_medications': ['theophylline', 'ciprofloxacin'],  # triggers DDI
        'allergies': []
    },
    {
        'name': 'Omar',
        'gfr': 80,
        'conditions': ['asthma'],
        'age': 45,
        'weight': 78,
        'gender': 'male',
        'ethnicity': 'Arab',
        'ALT': 22,
        'AST': 25,
        'bilirubin': 1.0,
        'genetic_variants': {},
        'lifestyle': {'smoking': False, 'alcohol': 'none'},
        'current_medications': ['montelukast', 'ibuprofen'],  # side effects + contraindications
        'allergies': ['nsaids']
    },
    {
        'name': 'Elena',
        'gfr': 65,
        'conditions': ['asthma', 'hypertension'],
        'age': 59,
        'weight': 68,
        'gender': 'female',
        'ethnicity': 'Caucasian',
        'ALT': 30,
        'AST': 28,
        'bilirubin': 1.0,
        'genetic_variants': {},
        'lifestyle': {'smoking': False, 'alcohol': 'low'},
        'current_medications': ['ibuprofen', 'prednisolone'],  # should trigger interaction from ddinter.csv
        'allergies': []
    },
    {
        'name': 'Thomas',
        'gfr': 50,
        'conditions': ['copd'],
        'age': 73,
        'weight': 85,
        'gender': 'male',
        'ethnicity': 'German',
        'ALT': 42,
        'AST': 38,
        'bilirubin': 1.1,
        'genetic_variants': {},
        'lifestyle': {'smoking': True, 'alcohol': 'moderate'},
        'current_medications': ['salmeterol', 'theophylline'],  # another DDI
        'allergies': []
    },
    {
        'name': 'Fatima',
        'gfr': 72,
        'conditions': ['asthma'],
        'age': 33,
        'weight': 56,
        'gender': 'female',
        'ethnicity': 'Middle Eastern',
        'ALT': 25,
        'AST': 22,
        'bilirubin': 0.8,
        'genetic_variants': {},
        'lifestyle': {'smoking': False, 'alcohol': 'none'},
        'current_medications': ['montelukast', 'paracetamol'],
        'allergies': ['aspirin']
    }

]

drug_rules = {
    'salmeterol': {
        'kidney_function': lambda gfr: True,
        'contraindications': ['severe asthma exacerbation'],
        'common_allergies': [],
        'drug_disease_interactions': ['cardiac arrhythmias']
    },
    'prednisolone': {
        'kidney_function': lambda gfr: True,
        'contraindications': ['systemic fungal infections'],
        'common_allergies': [],
        'drug_disease_interactions': ['diabetes', 'hypertension']
    },
    'theophylline': {
        'kidney_function': lambda gfr: gfr > 30,
        'contraindications': ['seizure disorder'],
        'common_allergies': [],
        'drug_disease_interactions': ['heart failure', 'arrhythmia']
    },
    'metformin': {
        'kidney_function': lambda gfr: gfr >= 45,
        'contraindications': ['renal impairment', 'lactic acidosis'],
        'common_allergies': [],
        'drug_disease_interactions': ['heart failure', 'copd']
    }
}

drug_disease_rules = {
    ('beta-blocker', 'asthma'): "May trigger bronchospasm; avoid in uncontrolled asthma.",
    ('theophylline', 'copd'): "Requires dose adjustment in severe COPD.",
    ('nsaid', 'asthma'): "May worsen respiratory symptoms.",
    ('budesonide', 'asthma'): "Commonly used safely in asthma, but monitor for overuse.",
    ('zidovudine', 'copd'): "May increase risk of pulmonary infections.",
    ('mannitol', 'asthma'): "May trigger bronchospasm in sensitive patients.",
    ('lamivudine', 'copd'): "Monitor in advanced COPD; limited respiratory effect."
}


# --- Drug–Drug Interaction Dictionary ---
import pandas as pd

# Load and normalize the CSV header safely
ddi_df = pd.read_csv('ddinter.csv', sep=';')

# Rename columns to remove extra spaces and convert to lowercase
ddi_df.columns = ['Drug_A', 'Drug_B', 'Level']

# Create a DDI dictionary from CSV
ddi_dict = {
    tuple(sorted([row['Drug_A'].strip().lower(), row['Drug_B'].strip().lower()])): {
        'level': row['Level'],
        'explanation': 'No explanation available.' # Placeholder, as explanations are not in the current CSV
    }
    for _, row in ddi_df.iterrows()
}

def evaluate_patient(patient):
    results = []
    gfr = patient.get('gfr', 90)
    conditions = [c.lower() for c in patient.get('conditions', [])]
    allergies = [a.lower() for a in patient.get('allergies', [])]
    meds = [m.lower() for m in patient.get('current_medications', [])]

    for drug in meds:
        rule = drug_rules.get(drug)
        if not rule:
            continue

        # GFR check
        if not rule['kidney_function'](gfr):
            results.append({
                'Type': 'Kidney Warning',
                'Drug': drug,
                'Detail': f'GFR={gfr}',
                'Level': 'Caution',
                'Reason': 'Reduced renal function – adjust or avoid'
            })

        # Contraindications
        for c in rule['contraindications']:
            if c.lower() in conditions:
                results.append({
                    'Type': 'Contraindication',
                    'Drug': drug,
                    'Detail': c,
                    'Level': 'High',
                    'Reason': f'Contraindicated in condition: {c}'
                })

        # Drug-disease risks
        for risk in rule['drug_disease_interactions']:
            if risk.lower() in conditions:
                results.append({
                    'Type': 'Drug–Disease Interaction',
                    'Drug': drug,
                    'Detail': risk,
                    'Level': 'Moderate',
                    'Reason': f'Use with caution in: {risk}'
                })

        # Allergies
        for allergen in rule['common_allergies']:
            if allergen.lower() in allergies:
                results.append({
                    'Type': 'Allergy Risk',
                    'Drug': drug,
                    'Detail': allergen,
                    'Level': 'High',
                    'Reason': f'Allergy concern: {allergen}'
                })

    return results

from itertools import combinations

def check_ddi(meds):
    meds = [m.lower() for m in meds]
    results = []
    for combo in combinations(meds, 2):
        pair = tuple(sorted(combo))
        if pair in ddi_dict:
            ddi = ddi_dict[pair]
            results.append({
                'Type': 'Drug–Drug Interaction',
                'Drug': f"{pair[0]} + {pair[1]}",
                'Detail': '',
                'Level': ddi['level'],
                'Reason': ddi['explanation']
            })
    return results

# Manual Respiratory Risk Table (Drug → Side Effect Info)
manual_respiratory_risks = {
    'budesonide': {
        'side_effect': "Cough, bronchospasm (especially with inhalation)",
        'risk_level': "Moderate",
        'source': "EMA Label / SmPC"
    },
    'zidovudine': {
        'side_effect': "May increase risk of dyspnea and pulmonary infections",
        'risk_level': "High",
        'source': "Drug Label / Literature"
    },
    'lamivudine': {
        'side_effect': "Generally safe, but caution in advanced COPD",
        'risk_level': "Low",
        'source': "Drug Label"
    },
    'mannitol': {
        'side_effect': "Can induce bronchospasm in sensitive patients",
        'risk_level': "Moderate",
        'source': "SmPC"
    },
    'salbutamol': {
        'side_effect': "May cause paradoxical bronchospasm, tremor, palpitations",
        'risk_level': "Moderate",
        'source': "SmPC / NICE"
    },
    'theophylline': {
        'side_effect': "Narrow therapeutic window, risk of tachycardia and respiratory distress",
        'risk_level': "High",
        'source': "Drug Label"
    },
    'fluticasone': {
        'side_effect': "Risk of oral thrush, mild cough or bronchospasm",
        'risk_level': "Low",
        'source': "EMA / SmPC"
    },
    'montelukast': {
        'side_effect': "May cause upper respiratory infections and neuropsychiatric effects",
        'risk_level': "Moderate",
        'source': "FDA Label / EMA"
    },
    'ipratropium': {
        'side_effect': "Can induce dry mouth and paradoxical bronchospasm",
        'risk_level': "Moderate",
        'source': "Drug Label"
    }
}

def check_respiratory_side_effects(meds):
    results = []
    for drug in meds:
        entry = manual_respiratory_risks.get(drug.lower())
        if entry:
            results.append({
                'Type': 'Side Effect',
                'Drug': drug,
                'Detail': '',
                'Level': entry['risk_level'],
                'Reason': entry['side_effect'] + f" (Source: {entry['source']})"
            })
    return results

lab_rules = {
    'metformin': {
        'gfr': lambda gfr: gfr >= 45,
    },
    'isoniazid': {
        'alt': lambda alt: alt <= 40,
        'ast': lambda ast: ast <= 40
    },
    'theophylline': {
        'ast': lambda ast: ast <= 50
    },
    'montelukast': {
        'bilirubin': lambda b: b <= 1.2
    }
}

def check_lab_thresholds(patient):
    warnings = []
    labs = {
        'gfr': patient.get('gfr'),
        'alt': patient.get('ALT'),
        'ast': patient.get('AST'),
        'bilirubin': patient.get('bilirubin')
    }
    meds = [m.lower() for m in patient.get('current_medications', [])]

    for drug in meds:
        if drug not in lab_rules:
            continue
        checks = lab_rules[drug]
        for lab, rule in checks.items():
            value = labs.get(lab)
            if value is not None and not rule(value):
                warnings.append({
                    'Type': 'Lab Warning',
                    'Drug': drug,
                    'Detail': f'{lab.upper()} = {value}',
                    'Level': 'Moderate',
                    'Reason': f'Lab value may impact {drug} safety'
                })
    return warnings

for patient in patients:
    print(f"\n🔍 Patient: {patient['name']}")

    result = evaluate_patient(patient)
    ddi_warnings = check_ddi(patient['current_medications'])
    resp_risks = check_respiratory_side_effects(patient['current_medications'])
    lab_warnings = check_lab_thresholds(patient)


    # Combine all warnings
    df = pd.DataFrame(result + ddi_warnings + resp_risks + lab_warnings)

    if df.empty:
        print("✅ No major warnings found.")
    else:
        print(df)